[{"categories":["blog"],"content":"主要包括使用图标呈现","date":"2022-01-12","objectID":"http://blog.qitas.cn/posts/test/","tags":["Qitas","Even"],"title":" 测试博客","uri":"http://blog.qitas.cn/posts/test/"},{"categories":["blog"],"content":" 本文同步更新至 Youtube 和 BiliBili ","date":"2022-01-12","objectID":"http://blog.qitas.cn/posts/test/:0:0","tags":["Qitas","Even"],"title":" 测试博客","uri":"http://blog.qitas.cn/posts/test/"},{"categories":["blog"],"content":"设置Even主题子模块化 在网站根目录下输入添加主题子模块的命令： git submodule add https://github.com/zhaoqiangcn/hugo-theme-even.git themes/even 如果在网站根目录下出现 .gitmodules 文件，且内容跟我的类似，则表示成功： [submodule \"themes/even\"] path = themes/even url = https://github.com/zhaoqiangcn/hugo-theme-even.git 然后 进入主题文件夹 git push 到远程仓库即可。 ","date":"2022-01-12","objectID":"http://blog.qitas.cn/posts/test/:1:0","tags":["Qitas","Even"],"title":" 测试博客","uri":"http://blog.qitas.cn/posts/test/"},{"categories":["blog"],"content":"部署 跟官网宣传的一样，部署 Hugo 网站到 Netlify 非常简单，跟着导航操作即可。 经过部署后已经可以通过 Netlify 分配的域名来访问网站了 ","date":"2022-01-12","objectID":"http://blog.qitas.cn/posts/test/:2:0","tags":["Qitas","Even"],"title":" 测试博客","uri":"http://blog.qitas.cn/posts/test/"},{"categories":["blog"],"content":"自定义域名 对于想对网站使用主域名而言，自定义域名很简单： 找到 Domain settings 选项卡，点击进入域名设置 在 Custom domains 一项下点击 Add domain alias 来添加自定义域名 在弹出来的输入框输出主域名即可 在域名商处添加如下的 DNS 记录，等待 DNS 刷新，看到主域名处出现 NETLIFY DNS 的墨绿色标志即代表成功 dns1.p01.nsone.net dns2.p01.nsone.net dns3.p01.nsone.net dns4.p01.nsone.net ","date":"2022-01-12","objectID":"http://blog.qitas.cn/posts/test/:3:0","tags":["Qitas","Even"],"title":" 测试博客","uri":"http://blog.qitas.cn/posts/test/"},{"categories":["blog"],"content":"主要包括使用图标呈现","date":"2021-11-12","objectID":"http://blog.qitas.cn/posts/hugo-netlify/","tags":["Qitas","GithubPages","Even"],"title":" 测试博客系统","uri":"http://blog.qitas.cn/posts/hugo-netlify/"},{"categories":["blog"],"content":" 本文同步更新至 Youtube 和 BiliBili ","date":"2021-11-12","objectID":"http://blog.qitas.cn/posts/hugo-netlify/:0:0","tags":["Qitas","GithubPages","Even"],"title":" 测试博客系统","uri":"http://blog.qitas.cn/posts/hugo-netlify/"},{"categories":["blog"],"content":"测试图片 图片为阅读数据类容。 ","date":"2021-11-12","objectID":"http://blog.qitas.cn/posts/hugo-netlify/:0:1","tags":["Qitas","GithubPages","Even"],"title":" 测试博客系统","uri":"http://blog.qitas.cn/posts/hugo-netlify/"},{"categories":["blog"],"content":"部署到Github Pages 请参照 用 Hugo 配合 GithubActions 自动构建我的博客 ","date":"2021-11-12","objectID":"http://blog.qitas.cn/posts/hugo-netlify/:1:0","tags":["Qitas","GithubPages","Even"],"title":" 测试博客系统","uri":"http://blog.qitas.cn/posts/hugo-netlify/"},{"categories":["blog"],"content":"设置Even主题子模块化 在网站根目录下输入添加主题子模块的命令： git submodule add https://github.com/zhaoqiangcn/hugo-theme-even.git themes/even 如果在网站根目录下出现 .gitmodules 文件，且内容跟我的类似，则表示成功： [submodule \"themes/even\"] path = themes/even url = https://github.com/zhaoqiangcn/hugo-theme-even.git 然后 进入主题文件夹 git push 到远程仓库即可。 ","date":"2021-11-12","objectID":"http://blog.qitas.cn/posts/hugo-netlify/:2:0","tags":["Qitas","GithubPages","Even"],"title":" 测试博客系统","uri":"http://blog.qitas.cn/posts/hugo-netlify/"},{"categories":["blog"],"content":"部署 跟官网宣传的一样，部署 Hugo 网站到 Netlify 非常简单，跟着导航操作即可。 经过部署后已经可以通过 Netlify 分配的域名来访问网站了 ","date":"2021-11-12","objectID":"http://blog.qitas.cn/posts/hugo-netlify/:3:0","tags":["Qitas","GithubPages","Even"],"title":" 测试博客系统","uri":"http://blog.qitas.cn/posts/hugo-netlify/"},{"categories":["blog"],"content":"自定义域名 对于想对网站使用主域名而言，自定义域名很简单： 找到 Domain settings 选项卡，点击进入域名设置 在 Custom domains 一项下点击 Add domain alias 来添加自定义域名 在弹出来的输入框输出主域名即可 在域名商处添加如下的 DNS 记录，等待 DNS 刷新，看到主域名处出现 NETLIFY DNS 的墨绿色标志即代表成功 dns1.p01.nsone.net dns2.p01.nsone.net dns3.p01.nsone.net dns4.p01.nsone.net ","date":"2021-11-12","objectID":"http://blog.qitas.cn/posts/hugo-netlify/:4:0","tags":["Qitas","GithubPages","Even"],"title":" 测试博客系统","uri":"http://blog.qitas.cn/posts/hugo-netlify/"},{"categories":["blog"],"content":"开启 HTTPS 在 HTTPS 选项卡下的 SSL/TLS certificate 选项开启即可。 ","date":"2021-11-12","objectID":"http://blog.qitas.cn/posts/hugo-netlify/:5:0","tags":["Qitas","GithubPages","Even"],"title":" 测试博客系统","uri":"http://blog.qitas.cn/posts/hugo-netlify/"},{"categories":["hugo"],"content":" 本文同步更新至 Youtube 和 BiliBili 作者已经在最新的主题中加入了Algolia搜索，现在只要在配置文件中开启一下即可。 ","date":"2020-02-18","objectID":"http://blog.qitas.cn/posts/hugo-algolia/:0:0","tags":["hugo","algolia","站内搜索","search"],"title":"用 Hugo 配合 Algolia 实现高效美观的站内搜索","uri":"http://blog.qitas.cn/posts/hugo-algolia/"},{"categories":["hugo"],"content":"前言 很多的 Hugo 主题是没有自带搜索功能的，但是们为了方便用户浏览和查找内容是需要在网站上提供搜索功能。大家可以查看 Hugo 官方推荐的搜索方案，这里我选择的是 Algolia ， 折腾了很久，主题也从EVEN更新到了现在的LOVEIT，发现也并非很繁琐，以下是折腾后的成果。 ","date":"2020-02-18","objectID":"http://blog.qitas.cn/posts/hugo-algolia/:1:0","tags":["hugo","algolia","站内搜索","search"],"title":"用 Hugo 配合 Algolia 实现高效美观的站内搜索","uri":"http://blog.qitas.cn/posts/hugo-algolia/"},{"categories":["hugo"],"content":"在Algolia 端创建应用和索引 ","date":"2020-02-18","objectID":"http://blog.qitas.cn/posts/hugo-algolia/:2:0","tags":["hugo","algolia","站内搜索","search"],"title":"用 Hugo 配合 Algolia 实现高效美观的站内搜索","uri":"http://blog.qitas.cn/posts/hugo-algolia/"},{"categories":["hugo"],"content":"Application 点击NEW APPLICATION，Name可选，方案选择FREE，然后创建，随后的地区选择邻近地区即可； ","date":"2020-02-18","objectID":"http://blog.qitas.cn/posts/hugo-algolia/:2:1","tags":["hugo","algolia","站内搜索","search"],"title":"用 Hugo 配合 Algolia 实现高效美观的站内搜索","uri":"http://blog.qitas.cn/posts/hugo-algolia/"},{"categories":["hugo"],"content":"Indices \u0026 Index 点击侧栏的Indices，然后点击Create Index，Index name自定义（例如自己的域名） ","date":"2020-02-18","objectID":"http://blog.qitas.cn/posts/hugo-algolia/:2:2","tags":["hugo","algolia","站内搜索","search"],"title":"用 Hugo 配合 Algolia 实现高效美观的站内搜索","uri":"http://blog.qitas.cn/posts/hugo-algolia/"},{"categories":["hugo"],"content":"API Keys 点击侧栏API Keys，记住以下的 Keys，之后都会用到； ","date":"2020-02-18","objectID":"http://blog.qitas.cn/posts/hugo-algolia/:2:3","tags":["hugo","algolia","站内搜索","search"],"title":"用 Hugo 配合 Algolia 实现高效美观的站内搜索","uri":"http://blog.qitas.cn/posts/hugo-algolia/"},{"categories":["hugo"],"content":"在本地生成索引 ","date":"2020-02-18","objectID":"http://blog.qitas.cn/posts/hugo-algolia/:3:0","tags":["hugo","algolia","站内搜索","search"],"title":"用 Hugo 配合 Algolia 实现高效美观的站内搜索","uri":"http://blog.qitas.cn/posts/hugo-algolia/"},{"categories":["hugo"],"content":"config.yaml 在themes同级添加config.yaml文件,注意这里的key是Admin API Key。 ---baseurl:\"http://blog.qitas.cn/\"DefaultContentLanguage:\"zh-cn\"hasCJKLanguage:truelanguageCode:\"zh-cn\"title:\"Qitas blog\"theme:\"loveit\"metaDataFormat:\"yaml\"algolia:index:\"**blogloveit\"key:\"*****9748e4cf6b\"appID:\"***KWB5\"--- ","date":"2020-02-18","objectID":"http://blog.qitas.cn/posts/hugo-algolia/:3:1","tags":["hugo","algolia","站内搜索","search"],"title":"用 Hugo 配合 Algolia 实现高效美观的站内搜索","uri":"http://blog.qitas.cn/posts/hugo-algolia/"},{"categories":["hugo"],"content":"hugo-aligolia 我们这里使用一个hugo-algolia的插件来完成我们的数据同步工作,要安装hugo-aligolia我们需要先确保我们已经安装了 npm 或者 yarn 包管理工具。 使用下面的命令安装即可： $ npm install hugo-algolia -g 配置完成以后，在根目录下面执行下面的命令： $ hugo-algolia -s JSON index file was created in public/algolia.json { updatedAt: '2020-01-23T02:36:09.480Z', taskID: 249063848950 } 这个时候我们在 dashboard 中打开 Indices，可以看到已经有几十条数据了。 如果某篇文章不想被索引的话，我们只需要在文件的最前面设置 index 参数为 false 即可。 ","date":"2020-02-18","objectID":"http://blog.qitas.cn/posts/hugo-algolia/:3:2","tags":["hugo","algolia","站内搜索","search"],"title":"用 Hugo 配合 Algolia 实现高效美观的站内搜索","uri":"http://blog.qitas.cn/posts/hugo-algolia/"},{"categories":["hugo"],"content":"页面展示 ","date":"2020-02-18","objectID":"http://blog.qitas.cn/posts/hugo-algolia/:4:0","tags":["hugo","algolia","站内搜索","search"],"title":"用 Hugo 配合 Algolia 实现高效美观的站内搜索","uri":"http://blog.qitas.cn/posts/hugo-algolia/"},{"categories":["hugo"],"content":"新建search.html 在themes\\LoveIt\\layouts\\partials新建search.html并添加如下代码 \u003cdiv class=\"aa-input-container\" id=\"aa-input-container\"\u003e \u003cinput type=\"search\" id=\"aa-search-input\" class=\"aa-input-search\" placeholder=\"Search for titles or URIs...\" name=\"search\" autocomplete=\"off\" /\u003e \u003csvg class=\"aa-input-icon\" viewBox=\"654 -372 1664 1664\"\u003e \u003cpath d=\"M1806,332c0-123.3-43.8-228.8-131.5-316.5C1586.8-72.2,1481.3-116,1358-116s-228.8,43.8-316.5,131.5 C953.8,103.2,910,208.7,910,332s43.8,228.8,131.5,316.5C1129.2,736.2,1234.7,780,1358,780s228.8-43.8,316.5-131.5 C1762.2,560.8,1806,455.3,1806,332z M2318,1164c0,34.7-12.7,64.7-38,90s-55.3,38-90,38c-36,0-66-12.7-90-38l-343-342 c-119.3,82.7-252.3,124-399,124c-95.3,0-186.5-18.5-273.5-55.5s-162-87-225-150s-113-138-150-225S654,427.3,654,332 s18.5-186.5,55.5-273.5s87-162,150-225s138-113,225-150S1262.7-372,1358-372s186.5,18.5,273.5,55.5s162,87,225,150s113,138,150,225 S2062,236.7,2062,332c0,146.7-41.3,279.7-124,399l343,343C2305.7,1098.7,2318,1128.7,2318,1164z\" /\u003e \u003c/svg\u003e \u003c/div\u003e ","date":"2020-02-18","objectID":"http://blog.qitas.cn/posts/hugo-algolia/:4:1","tags":["hugo","algolia","站内搜索","search"],"title":"用 Hugo 配合 Algolia 实现高效美观的站内搜索","uri":"http://blog.qitas.cn/posts/hugo-algolia/"},{"categories":["hugo"],"content":"添加search.js 在themes\\LoveIt\\assets\\js下添加search.js $(function() { // 替换成自己的algolia信息 var client = algoliasearch(\"***KWB5\", \"7139d*****9748e4cf6bc36ab191d\"); var index = client.initIndex(\"**blogloveit\"); autocomplete( \"#aa-search-input\", { hint: false }, { source: autocomplete.sources.hits(index, { hitsPerPage: 8 }), displayKey: \"name\", templates: { suggestion: function(suggestion) { console.log(suggestion); var search; if (suggestion.search) { search = suggestion.search; } else { search = suggestion.uri; } return ( \"\u003cspan\u003e\" + '\u003ca href=\"/' + search + '\"\u003e' + suggestion._highlightResult.title.value + \"\u003c/a\u003e\u003c/span\u003e\" ); } } } ); $(document).on(\"click\", \".aa-suggestion\", function () { var aa = $(this).find(\"a\").attr(\"href\"); window.location.href = aa; }) }); ","date":"2020-02-18","objectID":"http://blog.qitas.cn/posts/hugo-algolia/:4:2","tags":["hugo","algolia","站内搜索","search"],"title":"用 Hugo 配合 Algolia 实现高效美观的站内搜索","uri":"http://blog.qitas.cn/posts/hugo-algolia/"},{"categories":["hugo"],"content":"添加search.css文件 在themes\\LoveIt\\assets\\css路径下添加search.css样式文件 @import 'https://fonts.googleapis.com/css?family=Montserrat:400,700'; .aa-input-container { display: inline-block; position: relative; width: 100%; } .aa-input-container span,.aa-input-container input { width: inherit; } .aa-input-search { width: 300px; padding: 12px 28px 12px 12px; border:0px; border: 2px solid #e4e4e4; border-radius: 4px; -webkit-transition: .2s; transition: .2s; font-family: \"Montserrat\", sans-serif; box-shadow: 4px 4px 0 rgba(241, 241, 241, 0.35); font-size: 11px; box-sizing: border-box; color: black; -webkit-appearance: none; -moz-appearance: none; appearance: none; font-weight: bold; } .aa-input-search::-webkit-search-decoration, .aa-input-search::-webkit-search-cancel-button, .aa-input-search::-webkit-search-results-button, .aa-input-search::-webkit-search-results-decoration { display: none; } .aa-input-search:focus { outline: 0; border-color: #D3D3D3; box-shadow: 4px 4px 0 rgba(58, 150, 207, 0.1); } .aa-input-icon { height: 16px; width: 16px; position: absolute; top: 50%; right: 16px; -webkit-transform: translateY(-50%); transform: translateY(-50%); fill: #e4e4e4; } .aa-hint { color: yellow; } .aa-dropdown-menu { background-color: #fff; border: 2px solid rgba(228, 228, 228, 0.6); border-top-width: 1px; font-family: \"Montserrat\", sans-serif; width: 300px; margin-top: 10px; box-shadow: 4px 4px 0 rgba(241, 241, 241, 0.35); font-size: 11px; border-radius: 4px; box-sizing: border-box; } .aa-suggestion { padding: 12px; border-top: 1px solid gray; cursor: pointer; -webkit-transition: .2s; transition: .2s; display: -webkit-box; display: -ms-flexbox; display: flex; -webkit-box-pack: justify; -ms-flex-pack: justify; justify-content: space-between; -webkit-box-align: center; -ms-flex-align: center; align-items: center; } /* 背景色 */ .aa-suggestion:hover, .aa-suggestion.aa-cursor { background-color: #F5F5F5; } .aa-suggestion \u003e span:first-child { color: #000; } .aa-suggestion \u003e span:last-child { text-transform: uppercase; color: #000; } .aa-suggestion \u003e span:first-child em, .aa-suggestion \u003e span:last-child em { font-weight: 700; font-style: normal; background-color: rgba(0, 0, 0, 0.1); padding: 2px 0 2px 2px; } .aa-suggestion a{ color: #000; font-weight:bold; } .aa-suggestion a:hover{ color: #4B89DC; } ","date":"2020-02-18","objectID":"http://blog.qitas.cn/posts/hugo-algolia/:4:3","tags":["hugo","algolia","站内搜索","search"],"title":"用 Hugo 配合 Algolia 实现高效美观的站内搜索","uri":"http://blog.qitas.cn/posts/hugo-algolia/"},{"categories":["hugo"],"content":"在baseof.html中添加代码 在themes\\LoveIt\\layouts\\_default\\baseof.html中添加代码 {{ if ne .Site.Params.version \"5.x\" -}} {{ errorf \"\\n\\nThere are two possible situations that led to this error:\\n 1. You haven't copied the config.toml yet. See https://github.com/dillonzq/LoveIt#installation \\n 2. You have an incompatible update. See https://github.com//dillonzq/LoveIt/blob/master/CHANGELOG.md \\n\\n有两种可能的情况会导致这个错误发生:\\n 1. 你还没有复制 config.toml 参考 https://github.com/dillonzq/LoveIt#installation \\n 2. 你进行了一次不兼容的更新 参考 https://github.com//dillonzq/LoveIt/blob/master/CHANGELOG.md \\n\" -}} {{ end -}} \u003c!DOCTYPE html\u003e \u003chtml lang=\"{{ .Site.LanguageCode }}\"\u003e \u003chead\u003e \u003cmeta charset=\"utf-8\"\u003e \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"\u003e \u003ctitle\u003e{{ block \"title\" . }}{{ .Site.Title }}{{ end }}\u003c/title\u003e {{- partial \"head.html\" . }} \u003c/head\u003e \u003cbody\u003e \u003cscript\u003e window.isDark = (window.localStorage \u0026\u0026 window.localStorage.getItem('theme')) === 'dark'; window.isDark \u0026\u0026 document.body.classList.add('dark-theme'); \u003c/script\u003e \u003cdiv class=\"wrapper\"\u003e {{ partial \"header.html\" . -}} \u003cmain class=\"main\"\u003e \u003cdiv class=\"container\"\u003e {{ block \"content\" . }}{{ end -}} \u003c/div\u003e \u003c/main\u003e {{ partial \"footer.html\" . -}} {{ partial \"scripts.html\" . -}} \u003c/div\u003e \u003ca href=\"#\" class=\"dynamic-to-top\" id=\"dynamic-to-top\" data-scroll\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003c/a\u003e \u003c!-- 添加的代码 --\u003e \u003cdiv id=\"ex1\" class=\"modal\"\u003e {{ partial \"search.html\" . }} \u003c/div\u003e \u003c!-- 添加代码结束 --\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-02-18","objectID":"http://blog.qitas.cn/posts/hugo-algolia/:4:4","tags":["hugo","algolia","站内搜索","search"],"title":"用 Hugo 配合 Algolia 实现高效美观的站内搜索","uri":"http://blog.qitas.cn/posts/hugo-algolia/"},{"categories":["hugo"],"content":"引用css文件和js文件 在head.html中添加如下代码 {{ $res := resources.Get \"css/search.css\" | resources.Minify -}} \u003clink rel=\"stylesheet\" href=\"{{ $res.RelPermalink }}\"\u003e \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/jquery-modal/0.9.1/jquery.modal.min.css\" /\u003e 在scripts.html中添加如下代码 \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.0.0/jquery.min.js\"\u003e\u003c/script\u003e \u003c!-- jQuery Modal --\u003e \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery-modal/0.9.1/jquery.modal.min.js\"\u003e\u003c/script\u003e \u003cscript src=\"https://res.cloudinary.com/jimmysong/raw/upload/rootsongjc-hugo/algoliasearch.min.js\"\u003e\u003c/script\u003e \u003cscript src=\"https://res.cloudinary.com/jimmysong/raw/upload/rootsongjc-hugo/autocomplete.min.js\"\u003e\u003c/script\u003e {{ $res := resources.Get \"/js/search.js\" }} \u003cscript src= \"{{ $res.RelPermalink }}\" type=\"text/javascript\"\u003e\u003c/script\u003e ","date":"2020-02-18","objectID":"http://blog.qitas.cn/posts/hugo-algolia/:4:5","tags":["hugo","algolia","站内搜索","search"],"title":"用 Hugo 配合 Algolia 实现高效美观的站内搜索","uri":"http://blog.qitas.cn/posts/hugo-algolia/"},{"categories":["hugo"],"content":"添加锚点 在header.html中添加如下代码(手机端和桌面端两个地方都要添加代码) \u003cdiv class=\"navbar-menu\"\u003e {{ $currentPage := . }} {{ range .Site.Menus.main }} \u003ca class=\"menu-item{{ if or ($currentPage.IsMenuCurrent \"main\" .) ($currentPage.HasMenuCurrent \"main\" .) | or (eq $currentPage.RelPermalink .URL) }} active{{ end }}\" href=\"{{ .URL | absLangURL }}\" title=\"{{ .Title }}\"\u003e{{ .Name | safeHTML }}\u003c/a\u003e {{ end }} \u003ca href=\"javascript:void(0);\" class=\"theme-switch\"\u003e\u003ci class=\"fas fa-adjust fa-rotate-180 fa-fw\"\u003e\u003c/i\u003e\u003c/a\u003e \u003c!-- 添加的代码 --\u003e \u003ca href=\"#ex1\" rel=\"modal:open\"\u003e\u003ci class=\"fas fa-search fa-fw\"\u003e\u003c/i\u003e\u003c/a\u003e \u003c!-- 添加代码结束 --\u003e \u003c/div\u003e ","date":"2020-02-18","objectID":"http://blog.qitas.cn/posts/hugo-algolia/:4:6","tags":["hugo","algolia","站内搜索","search"],"title":"用 Hugo 配合 Algolia 实现高效美观的站内搜索","uri":"http://blog.qitas.cn/posts/hugo-algolia/"},{"categories":["hugo"],"content":"Valine 评论系统 邮件通知","date":"2020-01-16","objectID":"http://blog.qitas.cn/posts/hugo-valine-email/","tags":["Valine"],"title":"用 Hugo 配合 Valine 实现评论后实时邮件通知","uri":"http://blog.qitas.cn/posts/hugo-valine-email/"},{"categories":["hugo"],"content":" 本文同步更新至 Youtube 和 BiliBili 注意：Leancloud已经改版，有些界面位置已经与本文内容有所变化。 如果你对 Valine 自带的邮件提醒不满意，还可以使用更完善的第三方邮件提醒： Valine-Admin (by @zhaojun1998)，感谢 Valine-Admin 及其作者~ ","date":"2020-01-16","objectID":"http://blog.qitas.cn/posts/hugo-valine-email/:0:0","tags":["Valine"],"title":"用 Hugo 配合 Valine 实现评论后实时邮件通知","uri":"http://blog.qitas.cn/posts/hugo-valine-email/"},{"categories":["hugo"],"content":"概览 　此项目是一个对 Valine 评论系统的拓展应用，可增强 Valine 的邮件通知功能。基于 Leancloud 的云引擎与云函数。可以提供邮件 通知站长 和 @ 通知 的功能，而且还支持自定义 邮件通知模板。　","date":"2020-01-16","objectID":"http://blog.qitas.cn/posts/hugo-valine-email/:1:0","tags":["Valine"],"title":"用 Hugo 配合 Valine 实现评论后实时邮件通知","uri":"http://blog.qitas.cn/posts/hugo-valine-email/"},{"categories":["hugo"],"content":"部署Github源码 使用第三方评论插件的话，就无需使用 Valine 自带邮件提醒插件。在配置文件 config.toml 中把 notify 设置为 false。 进入 Leancloud 对应的 Valine 应用中，点击 云引擎 -\u003e 设置 填写代码库并保存：https://github.com/zhaojun1998/Valine-Admin 　切换到部署标签页，选择 Git 源码部署 　分支使用 master，点击部署即可 　可以在 云引擎 -\u003e 应用日志 查看部署日志信息 ","date":"2020-01-16","objectID":"http://blog.qitas.cn/posts/hugo-valine-email/:1:1","tags":["Valine"],"title":"用 Hugo 配合 Valine 实现评论后实时邮件通知","uri":"http://blog.qitas.cn/posts/hugo-valine-email/"},{"categories":["hugo"],"content":"配置 　此外，你需要设置云引擎的环境变量以提供必要的信息，点击 云引擎 -\u003e 设置，找到 自定义环境变量 必选参数 SITE_NAME : 网站名称。 SITE_URL : 网站地址， 最后不要加 / 。 SMTP_USER : SMTP 服务用户名，一般为邮箱地址。 SMTP_PASS : SMTP 密码，一般为授权码，而不是邮箱的登陆密码，请自行查询对应邮件服务商的获取方式 SMTP_SERVICE : 邮件服务提供商，支持 QQ、163、126、Gmail、\"Yahoo\"、...... ，全部支持请参考 : Nodemailer Supported services。 — 如这里没有你使用的邮件提供商，请查看自定义邮件服务器 SENDER_NAME : 寄件人名称。 ","date":"2020-01-16","objectID":"http://blog.qitas.cn/posts/hugo-valine-email/:2:0","tags":["Valine"],"title":"用 Hugo 配合 Valine 实现评论后实时邮件通知","uri":"http://blog.qitas.cn/posts/hugo-valine-email/"},{"categories":["hugo"],"content":"邮箱开启 SMTP 服务 　想要使用第三方邮件提醒，必须将 SMTP_USER 中的邮箱开启 SMTP 服务，这里以 QQ 邮箱为例： 　然后将 邮箱地址 设置至 SMTP_USER，邮箱授权码 设置至 SMTP_PASS，SMTP_SERVICE 中填写 QQ ","date":"2020-01-16","objectID":"http://blog.qitas.cn/posts/hugo-valine-email/:2:1","tags":["Valine"],"title":"用 Hugo 配合 Valine 实现评论后实时邮件通知","uri":"http://blog.qitas.cn/posts/hugo-valine-email/"},{"categories":["hugo"],"content":"其他功能 TEMPLATE_NAME：设置提醒邮件的主题，目前内置了两款主题，分别为 default 与 rainbow。默认为 default 。 TO_EMAIL：这个是填收邮件提醒的邮箱地址，若没有这个字段，则邮件将发到SMTP_USER。 　如果 SMTP_SERVICE 中没有你使用的邮件服务提供商, 也可以进行自定义。 　参数配置如下： SMTP_HOST : 邮件服务提供商 SMTP 地址，如 qq : smtp.qq.com，此项需要自行查询或询问其服务商。 SMTP_PORT : 邮件服务提供商 SMTP 端口, 此项需要自行查询或询问其服务商。 SMTP_SECURE : 是否启用加密, 默认为 true，一般不需要设置，如有特殊请自行配置。 此项需要自行查询或询问其服务商。 注: 配置自定义邮件服务器的话，请不要同时配置 SMTP_SERVICE。当 SMTP_SERVICE 未配置时才会启用自定义邮件服务 ","date":"2020-01-16","objectID":"http://blog.qitas.cn/posts/hugo-valine-email/:2:2","tags":["Valine"],"title":"用 Hugo 配合 Valine 实现评论后实时邮件通知","uri":"http://blog.qitas.cn/posts/hugo-valine-email/"},{"categories":["hugo"],"content":"关闭LeanCloud 休眠 　免费版的 LeanCloud 容器，是有强制性休眠策略的，不能 24 小时运行： 每天必须休眠 6 个小时 30 分钟内没有外部请求，则休眠。 休眠后如果有新的外部请求实例则马上启动（但激活时此次发送邮件会失败）。 　分析了一下上方的策略，如果不想付费的话，最佳使用方案就设置定时器，每天 7 - 23 点每 20 分钟访问一次，这样可以保持每天的绝大多数时间邮件服务是正常的。 　首先需要先配置下 Web 主机的域名，使用定时器时要用到。配置方式如下。 　点击 云引擎 -\u003e 设置，找到 Web 主机域名 此处如果要设置自定义的 Web 主机域名，根据中国大陆有关法律法规，国内用户绑定独立域名前必须先域名备案。 使用自带定时器 　首先需要添加环境变量，ADMIN_URL：Web 主机域名，如图所示（添加后重启容器才会生效）： 　然后点击云引擎 - 定时任务，新增定时器，按照图片上填写： 定时任务名称：自定义 选择生成环境：self_wake Cron 表达式：定时器触发代码，表示 7点 ~ 23点每20分钟执行一次 　添加后要记得点击启用，启用状态如下： 　启用成功后，每 20 分钟在 云引擎 -\u003e 应用日志 中可以看到日志。 注意：更新新版本与更改环境变量均需要重启容器后生效。 ","date":"2020-01-16","objectID":"http://blog.qitas.cn/posts/hugo-valine-email/:2:3","tags":["Valine"],"title":"用 Hugo 配合 Valine 实现评论后实时邮件通知","uri":"http://blog.qitas.cn/posts/hugo-valine-email/"},{"categories":["hugo"],"content":"LeanCloud 评论管理 　LeanCloud 提供了一套评论管理后台，该后台登录需要账号密码，需要在这里设置，只需要填写 email、password、username，这三个字段即可, 使用 email 作为账号登陆即可。（为了安全考虑，此 email 必须为配置中的 SMTP_USER 或 TO_EMAIL， 否则不允许登录） 　访问自己的 Web 主机域名，效果如下： 　使用已设置好的账号密码登录即可管理评论。 ","date":"2020-01-16","objectID":"http://blog.qitas.cn/posts/hugo-valine-email/:2:4","tags":["Valine"],"title":"用 Hugo 配合 Valine 实现评论后实时邮件通知","uri":"http://blog.qitas.cn/posts/hugo-valine-email/"},{"categories":["hugo"],"content":"完工 　此时，我们在站点发表评论以后，邮箱中就会收到提醒信息啦。 ","date":"2020-01-16","objectID":"http://blog.qitas.cn/posts/hugo-valine-email/:3:0","tags":["Valine"],"title":"用 Hugo 配合 Valine 实现评论后实时邮件通知","uri":"http://blog.qitas.cn/posts/hugo-valine-email/"},{"categories":["hugo"],"content":"Valine 评论系统 leancloud","date":"2020-01-10","objectID":"http://blog.qitas.cn/posts/hugo-valine/","tags":["Valine"],"title":"用 Hugo 配合 Valine 实现简洁的评论交互","uri":"http://blog.qitas.cn/posts/hugo-valine/"},{"categories":["hugo"],"content":" 本文同步更新至 Youtube 和 BiliBili 作者已经在最新的主题中加入了Algolia搜索，现在只要在配置文件中开启一下即可。 ","date":"2020-01-10","objectID":"http://blog.qitas.cn/posts/hugo-valine/:0:0","tags":["Valine"],"title":"用 Hugo 配合 Valine 实现简洁的评论交互","uri":"http://blog.qitas.cn/posts/hugo-valine/"},{"categories":["hugo"],"content":"Leancloud相关配置 评论系统依赖于leancloud，所以需要先在leancloud中进行相关的准备工作。 登录 或 注册 LeanCloud 登录成功后，进入后台点击左上角的创建应用： 进入应用，左边栏找到【设置】【应用Key】 记录 App ID，App Key 后面配置文件中会用到： 建立两个新的存储,因为评论和文章阅读数统计依赖于存储Class 创建两个存储Class，分别命名为: Counter 和 Comment; 为应用添加安全域名，左边栏点击【设置】【安全中心】【安全域名】 输入博客使用的域名，点击保存即可： ","date":"2020-01-10","objectID":"http://blog.qitas.cn/posts/hugo-valine/:1:0","tags":["Valine"],"title":"用 Hugo 配合 Valine 实现简洁的评论交互","uri":"http://blog.qitas.cn/posts/hugo-valine/"},{"categories":["hugo"],"content":"config.toml添加参数 为了使配置更灵活，将 Valine 中大部分初始化参数项均设置为配置文件中的参数项，在 config.toml 的适当位置，比如我的文件中 [params.gitment] 的下面： [params.gitment] # Gitment is a comment system based on GitHub issues. see https://github.com/imsun/gitment owner = \"\" # Your GitHub ID repo = \"\" # The repo to store comments clientId = \"\" # Your client ID clientSecret = \"\" # Your client secret # 这里添加Valine的相关参数 添加 Valine 参数项： # Valine. # You can get your appid and appkey from https://leancloud.cn # more info please open https://valine.js.org [params.valine] enable = true appId = '你的appId' appKey = '你的appKey' notify = false # mail notifier , https://github.com/xCss/Valine/wiki verify = false # Verification code avatar = 'mm' placeholder = '说点什么吧...' visitor = true 上面几项内容的含义，这里简单一说，具体还是要看 Valine官网中配置相关的内容： 参数 用途 enable 这是用于主题中配置的，不是官方Valine的参数，true时控制开启此评论系统 appId 这是在 leancloud 后台应用中获取的，也就是上面提到的 App ID appKey 这是在 leancloud 后台应用中获取的，也就是上面提到的 App Key notify 用于控制是否开启邮件通知功能，具体参考邮件提醒配置 verify 用于控制是否开启评论验证码功能 avatar 用于配置评论项中用户头像样式，有多种选择：mm, identicon, monsterid, wavatar, retro, hide。详细参考：头像配置 placehoder 评论框的提示符 visitor 控制是否开启文章阅读数的统计功能i, 详情阅读文章阅读数统计 ","date":"2020-01-10","objectID":"http://blog.qitas.cn/posts/hugo-valine/:2:0","tags":["Valine"],"title":"用 Hugo 配合 Valine 实现简洁的评论交互","uri":"http://blog.qitas.cn/posts/hugo-valine/"},{"categories":["hugo"],"content":"修改主题文件 主要是修改主题中评论相关的布局文件 themes/even/layouts/partials/comments.html，按照 Valine快速开始 添加 Valine 相关代码，找到以下位置，大概55～81行的位置： \u003c!-- gitment --\u003e {{- if .Site.Params.gitment.enable -}} \u003cdiv id=\"comments-gitment\"\u003e\u003c/div\u003e \u003c!--这里省略了部分代码--\u003e \u003cnoscript\u003ePlease enable JavaScript to view the \u003ca href=\"https://github.com/imsun/gitment\"\u003ecomments powered by gitment.\u003c/a\u003e\u003c/noscript\u003e {{- end }} \u003c!--这个位置添加Valine相关代码--\u003e 添加的 Valine 评论的代码如下： \u003c!-- valine --\u003e {{- if .Site.Params.valine.enable -}} \u003c!-- id 将作为查询条件 --\u003e \u003cspan id=\"{{ .URL | relURL }}\" class=\"leancloud_visitors\" data-flag-title=\"{{ .Title }}\"\u003e \u003cspan class=\"post-meta-item-text\"\u003e文章阅读量 \u003c/span\u003e \u003cspan class=\"leancloud-visitors-count\"\u003e1000000\u003c/span\u003e \u003cp\u003e\u003c/p\u003e \u003c/span\u003e \u003cdiv id=\"vcomments\"\u003e\u003c/div\u003e \u003cscript src=\"//cdn1.lncld.net/static/js/3.0.4/av-min.js\"\u003e\u003c/script\u003e \u003cscript src='//unpkg.com/valine/dist/Valine.min.js'\u003e\u003c/script\u003e \u003cscript type=\"text/javascript\"\u003e new Valine({ el: '#vcomments' , appId: '{{ .Site.Params.valine.appId }}', appKey: '{{ .Site.Params.valine.appKey }}', notify: {{ .Site.Params.valine.notify }}, verify: {{ .Site.Params.valine.verify }}, avatar:'{{ .Site.Params.valine.avatar }}', placeholder: '{{ .Site.Params.valine.placeholder }}', visitor: {{ .Site.Params.valine.visitor }} }); \u003c/script\u003e {{- end }} 可以看到上述代码中引用了配置文件中的相关参数，这样以后修改配置就不用修改代码了，只需要改配置文件 config.toml，另外注意到的是，我也添加了文章阅读数统计的显示内容。将配置文件中 valine 配置的 eanble 设置为 true ，本地测试一下，正常的话，打开一篇文章会看到： 此时，生成静态博客文件，部署到自己的托管平台，正常的话打开博客中的一篇文章，就可以看到正常的文章计数和评论框了，此时随便评论一条，验证一下，评论如果成功，可以去leancloud后台看一下 Comment 和 Counter存储中新加了相应网址的条目。 ","date":"2020-01-10","objectID":"http://blog.qitas.cn/posts/hugo-valine/:3:0","tags":["Valine"],"title":"用 Hugo 配合 Valine 实现简洁的评论交互","uri":"http://blog.qitas.cn/posts/hugo-valine/"},{"categories":["hugo"],"content":" 本文同步更新至 Youtube 和 BiliBili 目前我已经切换到Loveit主题了，但是方法是一样的 ","date":"2020-01-09","objectID":"http://blog.qitas.cn/posts/hugo-github-actions/:0:0","tags":["GithubPages","GithubActions"],"title":"用 Hugo 配合 Github Actions 自动构建我的博客","uri":"http://blog.qitas.cn/posts/hugo-github-actions/"},{"categories":["hugo"],"content":"初始化 GitHub 仓库 我们起一个 分支名字叫 develop,用来保存我们的 Hugo 的源码。 然后起一个 gh-pages 分支，推送到远端，用来当做我们的 GitHub Pages 展示的分支。 GitHub Pages 其实就是一个静态页面展示的一个地方，他利用生成静态页面，直接通过域名来给用户展示。 # git checkout -b gh-pages # git push origin gh-pages # git checkout -b develop # git push origin develop ","date":"2020-01-09","objectID":"http://blog.qitas.cn/posts/hugo-github-actions/:1:0","tags":["GithubPages","GithubActions"],"title":"用 Hugo 配合 Github Actions 自动构建我的博客","uri":"http://blog.qitas.cn/posts/hugo-github-actions/"},{"categories":["hugo"],"content":"初始化 Hugo 如果你已经初始化了 Hugo 项目，可以跳过这一步，直接到 Actions 自动构建 ","date":"2020-01-09","objectID":"http://blog.qitas.cn/posts/hugo-github-actions/:2:0","tags":["GithubPages","GithubActions"],"title":"用 Hugo 配合 Github Actions 自动构建我的博客","uri":"http://blog.qitas.cn/posts/hugo-github-actions/"},{"categories":["hugo"],"content":"下载一个主题 Hugo 的开源主题还是挺多的，你可以通过 主题官网 找一个你比较喜欢的主题来搭建自己的博客。 我们这里用 Even这个主题 # git clone https://github.com/olOwOlo/hugo-theme-even themes/even 进入 blog/themes/even/exampleSite 文件夹，将 config.tom 文件拷贝到项目根目录下，同时将 blog/themes/even/exampleSite/content 文件夹覆盖掉根目录下的 content 。 ","date":"2020-01-09","objectID":"http://blog.qitas.cn/posts/hugo-github-actions/:2:1","tags":["GithubPages","GithubActions"],"title":"用 Hugo 配合 Github Actions 自动构建我的博客","uri":"http://blog.qitas.cn/posts/hugo-github-actions/"},{"categories":["hugo"],"content":"运行看一看你的博客 # hugo -D server hugo 编译后，会自动生成一个 public 文件夹的静态页面，我们只需要把 public 文件夹里面的东西，提交到 gh_pages 分支，就能够成功构建 GitHub Pages 页面了。 ","date":"2020-01-09","objectID":"http://blog.qitas.cn/posts/hugo-github-actions/:2:2","tags":["GithubPages","GithubActions"],"title":"用 Hugo 配合 Github Actions 自动构建我的博客","uri":"http://blog.qitas.cn/posts/hugo-github-actions/"},{"categories":["hugo"],"content":"Actions 自动构建 这里，我们只需要去监听 develop 是否推送就可以了。 构建我们需要做一下流程： 检出代码 安装 Hugo 环境 编译 Hugo 将 public 下的文件夹推送到 gh-pages分支 我们再 .github/workflows 里面新建一个 gh_pages.yml name: GitHub Page Deploy on: push: branches: - develop jobs: build-deploy: runs-on: ubuntu-18.04 steps: - name: Checkout master uses: actions/checkout@v1 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: '0.61.0' # extended: true - name: Build Hugo run: | hugo - name: Deploy Hugo to gh-pages uses: peaceiris/actions-gh-pages@v2 env: ACTIONS_DEPLOY_KEY: ${{ secrets.ACTIONS_DEPLOY_KEY }} PUBLISH_BRANCH: gh-pages PUBLISH_DIR: ./public 这些 action 统统可以在 github actions marketplace 里面找到。 我们要巧妙的去搜索一些关于 uses 的一些 actions 这样可以极大的节省我们去写 shell 的时间。 上面代码中，只要配几个参数就可以用。参数之中， 需要我们的秘钥去推送到 gh-pages 分支，使用的是加密变量，需要在项目的settings/secrets菜单里面设置。 具体 我们可以看 peaceiris/actions-gh-pages@v2 的文档，里面告诉了我们如何加入到 secrets 里面。 特别注意 我们要去对着 peaceiris/actions-gh-pages@v2 去看如何生成，以及加入加密变量。 ACTIONS_DEPLOY_KEY 一定要加入到 secrets 里面，否则构建推送会失败。 ","date":"2020-01-09","objectID":"http://blog.qitas.cn/posts/hugo-github-actions/:3:0","tags":["GithubPages","GithubActions"],"title":"用 Hugo 配合 Github Actions 自动构建我的博客","uri":"http://blog.qitas.cn/posts/hugo-github-actions/"},{"categories":["hugo"],"content":"推送到Github #!/bin/bash echo -e \"\\033[0;32mDeploying updates to GitHub...\\033[0m\" # Build the project. hugo -t even # Add changes to git. git add . # Commit changes. msg=\"rebuilding site `date`\" if [ $# -eq 1 ] then msg=\"$1\" fi git commit -m \"$msg\" # Push source and build repos. git push origin develop 执行上面的代码后，Github 收到PUSH后Actions 就会自动开始构建了，等待结束大约1分钟不到即可打开网站域名试试吧。 ","date":"2020-01-09","objectID":"http://blog.qitas.cn/posts/hugo-github-actions/:4:0","tags":["GithubPages","GithubActions"],"title":"用 Hugo 配合 Github Actions 自动构建我的博客","uri":"http://blog.qitas.cn/posts/hugo-github-actions/"}]